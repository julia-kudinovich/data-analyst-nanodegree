geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(color = year_joined.bucket)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
yo <-read.csv('yogurt.csv')
str(yo)
yo$id<-factor(yo$id)
str(yo)
ggplot(aes(price), data=yo)
ggplot(aes(price), data=yo)+
geom_line()
ggplot(aes(price, y=count(id)), data=yo)+
geom_line()
ggplot(aes(x= price, ), data=yo)+
geom_line()
ggplot(aes(x= price, ), data=yo)
ggplot(aes(x= price ), data=yo)
qplot(data=you, x=pice)
qplot(data=yo, x=pice)
qplot(data=yo, x=price)
qplot(data=yo, x=price, binwidth=10)
qplot(data=yo, x=price, binwidth=5)
qplot(data=yo, x=price, binwidth=10)
qplot(data=yo, x=price)
summary(yo)
length(unique(yo$price))
table(yo$prices)
table(yo$prices)
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry +pina.colada + plain + mixed.berry
yo <- transform(yo, all.purchases = strawberry + blueberry +pina.colada + plain + mixed.berry)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
summary(yo$all.purchases)
View(pf.fc_by_age_months)
View(yo)
View(yo)
yo$all.purchases <- yo$strawberry + yo$blueberry + yo$pina.colada + yo$plain + yo$mixed.berry
qplot(x=all.purchases, data=yo, binwidth =1)
ggplot(eas(x=price, y=time) data=yo ) + geom_line()
ggplot(aes(x=price, y=time) data=yo ) + geom_line()
ggplot(aes(x=price, y=time), data=yo ) + geom_line()
ggplot(aes(x=time, y=price), data=yo ) + geom_line()
ggplot(aes(x=time, y=price), data=yo ) + geom_point()
ggplot(aes(x=time, y=price), data=yo ) + geom_jitter()
ggplot(aes(x=time, y=price), data=yo ) + geom_jitter(alpha=1/4)
ggplot(aes(x=time, y=price), data=yo ) + geom_jitter(alpha=1/4, shape=21)
ggplot(aes(x=time, y=price), data=yo ) + geom_jitter(alpha=1/4)
ggplot(aes(x=time, y=price), data=yo ) + geom_jitter(alpha=1/4, shape=21)
set.seed(4230)
sample.ids <-sample(levels(yo$id),16)
sample.ids
ggplot(aes(x=time, y=price), data=subset(yo, id %in% sample.ids)) +
facet_wrap(~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch=1)
set.seed(999)
sample.ids <-sample(levels(yo$id),16)
ggplot(aes(x=time, y=price), data=subset(yo, id %in% sample.ids)) +
facet_wrap(~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch=1)
str(reddit)
levels(reddit$age.range)
install.packages('GGally')
theme_set(theme_minimal(20))
library(GGally)
set.seed(1836)
pf_subset <- pf[ , c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset),100), ])
ggpairs(pf_subset[sample.int(nrow(pf_subset),100), ], axisLabels = 'internal')
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
View(nci)
View(nci)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
qplot(x=price, data=diamonds) +
facet_wrap(~ color) +
geom_line()
qplot(x=price, data=diamonds) +
facet_wrap(~ color)
summary(diamonds)
qplot(x=price, data=diamonds,fill = color) +
facet_wrap(~ color)
qplot(x=price, data=diamonds, fill = cut) +
facet_wrap(~ color)
qplot(x=log(price), data=diamonds, fill = cut) +
facet_wrap(~ color)
qplot(x=price, data=diamonds, fill = cut) +
facet_wrap(~ color)
ggplot(aes(x=price, y=table), data = diamonds) +
geom.point()
ggplot(aes(x=price, y=table), data = diamonds) +
geom_point()
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point()
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut))
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(breaks = seq(0,100, 10))
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut), breaks = seq(0,100, 10))
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(breaks = seq(0,100, 15))
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut))
ggplot(aes(x=table, y=price), data = diamonds) +
geom_point(aes(color=cut))
ggplot(aes(x=table, y=x*y*z), data = diamonds) +
geom_point(aes(color=clarity))
View(stateSubset)
View(diamonds)
ggplot(aes(x=volume, y=log(price)), subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) ) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)), subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)), subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)), data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=price),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
log(
ggplot(aes(x=volume, y=log(price)),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=price),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=price),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
ggplot(aes(x=volume, y=log(price)),
data = subset(diamonds, diamonds$volume < quantile(diamonds$volume, 0.99) )) +
geom_point(aes(color=cut))
summary(pf)
pf$prop_initiated = pf$friendships_initiated/pf$friend_count
ggplot(aes(x=tenure, y=prop_initiated), data=pf)+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median, geom='point', shape=4)
ggplot(aes(x=tenure, y=prop_initiated), data=pf)+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, prop_initiated>0)+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, prop_initiated>0))+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, pf$prop_initiated>0))+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, !is.na(pf$year_joined)))+
geom_line(aes(color=year_joined.bucket)) +
stat_summary(fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, !is.na(pf$year_joined)))+
geom_line(aes(color=year_joined.bucket),
(stat = 'summary', fun.y = median, aes(color = year_joined.bucket))
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, !is.na(pf$year_joined)))+
geom_line(aes(color=year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, !is.na(pf$year_joined)))+
geom_line(aes(color=year_joined.bucket), stat = 'summary', fun.y = median) +
geom_smoother()
ggplot(aes(x=tenure, y=prop_initiated), data=subset(pf, !is.na(pf$year_joined)))+
geom_line(aes(color=year_joined.bucket), stat = 'summary', fun.y = median) +
geom_smooth()
View(pf)
View(pf)
summary(subset(pf, pf$year_joined.bucket='(2012,2014]'))
summary(subset(pf, pf$year_joined.bucket=='(2012,2014]'))
mean(subset(pf, pf$year_joined.bucket=='(2012,2014]')$prop_initiated)
ss <- subset(pf, pf$year_joined.bucket=='(2012,2014]')
mean(ss$prop_initiated)
mean(pf$prop_initiated)
mean(pf$www_likes)
with(subset(pf, pf$year_joined.bucket == '(2012,2014]' & !is.nan(pf$prop_initiated)), mean(prop_initiated))
summary(subset(pf, pf$year_joined.bucket=='(2012,2014]' !is.nan(pf$prop_initiated)))
summary(subset(pf, pf$year_joined.bucket=='(2012,2014]' & !is.nan(pf$prop_initiated)))
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point()
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=color))
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_point(aes(color=color)) +
facet_wrap(~clarity)
ggplot(aes(x=cut, y=price/carat), data=diamonds) +
geom_jitter(aes(color=color)) +
facet_wrap(~clarity)
ggplot(aes(x=weight, y=prcie), data=diamonds) +
geom_point()
ggplot(aes(x=carat, y=prcie), data=diamonds) +
geom_point()
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()+
xlim(quantile(0.99))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()+
xlim(0,quantile(0.99))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()+
coord_cartesian(xlim = c(0, quantile(0.99)), ylim = c(0, quantile(0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()+
coord_cartesian(xlim = c(0, quantile(pf$carat,0.99)), ylim = c(0, quantile(pf.price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point()+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=carat))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(lim = c(0, quantile(diamonds$carat,0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99)))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99))) +
stat_smooth(method='lm')
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(lim = c(0, quantile(diamonds$carat,0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price,0.99))) +
geom_smooth()
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(lim = c(0, quantile(diamonds$carat,0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price,0.99))) +
geom_smooth(method='lm')
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
install.packages("GGally")
install.packages("scales")
install.packages("car")
install.packages("plyr")
install.packages("MASS")
install.packages("lattice")
install.packages("reshape")
install.packages("lattice")
install.packages("reshape")
install.packages("MASS")
install.packages("MASS")
library(ggplot2)
library(GGally)
library(scales)
install.packages('scales')
install.packages('GGally') # for scatterplot matrix
install.packages('scales')
install.packages('memisc') #to summarize regression
install.packages('lattice')
install.packages('MASS')
install.packages('car') # to recode variables
install.packages('reshape') # to reshape and wrangle your data
install.packages('plyr') # to create summaries and transformations of data
library(ggplot2)
library(GGally)
library(scales)
install.packages('GGally') # for scatterplot matrix
install.packages('scales')
install.packages('memisc') #to summarize regression
install.packages('lattice')
install.packages('MASS')
install.packages('car') # to recode variables
install.packages('reshape') # to reshape and wrangle your data
install.packages('plyr') # to create summaries and transformations of data
install.packages("GGally")
install.packages("memisc")
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
20022012
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages('dplyr') # to create summaries and transformations of data
install.packages('reshape2') # to reshape and wrangle your data
install.packages("reshape2")
install.packages('reshape2') # to reshape and wrangle your data
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = 'internal')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = 'internal')
library(gridExtra)
plot1 <- qplot(price, data=diamonds) +
ggtitle('Price')
plot2 <- qplot(log(price), data=diamonds) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, numcol=2)
grid.arrange(plot1, plot2)
plot2 <- qplot(log(price), data=diamonds, binwidth=100) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- qplot(x= price, data=diamonds, binwidth=100) +
ggtitle('Price')
plot2 <- qplot(log(price), data=diamonds, binwidth=100) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- qplot(x= price, data=diamonds, binwidth=100) +
ggtitle('Price')
plot2 <- qplot(x=price, data=diamonds, binwidth=100) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- qplot(x= price, data=diamonds, binwidth=100) +
ggtitle('Price')
plot2 <- qplot(log(price), data=diamonds, binwidth=0.1) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- qplot(x= price, data=diamonds, binwidth=100) +
ggtitle('Price')
plot2 <- qplot(log(price), data=diamonds, binwidth=0.01) +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
qplot(carat, price, data=diamonds)+
scale_y_continuous(trans=log10_trans()) +
gtitle("Price (log10) by Carat")
qplot(carat, price, data=diamonds)+
scale_y_continuous(trans=log10_trans()) +
ggtitle("Price (log10) by Carat")
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T ))
head(sort(table(diamonds$carat), decreasing = T ))
head(sort(table(diamonds$carat), decreasing = T ))
head(sort(table(diamonds$price), decreasing = T ))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
install.packages("RColorBrewer")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot)
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99))) +
stat_smooth(method='lm')
#or
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
scale_x_continuous(lim = c(0, quantile(diamonds$carat,0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price,0.99))) +
geom_smooth(method='lm')
# install these if necessary
install.packages('ggplot2')
install.packages('GGally') # for scatterplot matrix
install.packages('scales')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(aes(color=cut))+
coord_cartesian(xlim = c(0, quantile(diamonds$carat,0.99)), ylim = c(0, quantile(diamonds$price,0.99))) +
stat_smooth(method='lm')
library("ggplot2", lib.loc="C:/Program Files/R/R-3.3.2/library")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
